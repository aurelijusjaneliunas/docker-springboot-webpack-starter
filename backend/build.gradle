buildscript {

  ext {
    springBootVersion = '1.3.5.RELEASE'
  }

  repositories {
    mavenCentral()
    jcenter()
  }

  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
  }

  configurations {
    compile.exclude module: "spring-boot-starter-tomcat"
  }

}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'

jar {

  baseName = 'backend'
  version = '1.0.0'

}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  mavenCentral()
  jcenter()
}

//configurations {
//    dev
//}

dependencies {

  compile 'org.springframework.boot:spring-boot-starter-undertow'
  compile 'org.springframework.boot:spring-boot-starter-web'
  compile 'org.springframework.boot:spring-boot-starter-thymeleaf'
  compile 'org.codehaus.groovy:groovy'

  compile 'org.springframework.boot:spring-boot-starter-security'
  compile 'org.springframework.session:spring-session'

  compile 'org.springframework.boot:spring-boot-starter-redis'

  compile 'org.springframework.boot:spring-boot-devtools'
  //  dev("org.springframework.boot:spring-boot-devtools")

  testCompile 'org.springframework.boot:spring-boot-starter-test'
  testCompile 'org.springframework.security:spring-security-test'
  testCompile 'org.spockframework:spock-spring'
  testCompile 'com.geowarin:spring-spock-mvc:0.2.1'

}

eclipse {

  classpath {
    containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
    containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
  }

}

idea {

    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main/")
    }

}

task wrapper(type: Wrapper) {
    gradleVersion = '2.13'
}

//bootRun {
//    classpath = sourceSets.main.runtimeClasspath + configurations.dev
//}

//jar {
//  from('../frontend/dist') {
//    into 'static'
//  }
//}
//
//jar.dependsOn(':frontend:assemble')
